package com.collab.bean.login;

import com.collab.bean.login.IF.RSABeanIF;
import org.apache.commons.codec.binary.Base64;
import org.springframework.stereotype.Service;

import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.ArrayList;
import java.util.Random;

@Service
public class RSAArrBean implements RSABeanIF {
    ArrayList<String> privateKeyArr = new ArrayList<>();
    ArrayList<String> publicKeyArr = new ArrayList<>();

    private PrivateKey privateKey;
    private int rnum;

    public RSAArrBean() {

        long seed =System.currentTimeMillis();
        Random rand = new Random(seed); // 특정 시드를 사용해 난수 생성기 초기화
        rnum = rand.nextInt(5);// 0~5미만의 정수 반환

        //개인키 암호화

        privateKeyArr.add("MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC30ps0DiDcVVDIfaDD+kxXn5XQKbFxhfUIc03rUlcwtXwp9Ngz0J9eRQ9mWmq34oEc5RY9XnZbn/Ihls00lSp3fsUPspX2y8cUq69YxcFF1YsebrIS8XydJmX0p+RG/n1F8Pm1qtAh1+CV67HABitqq2EQBBsxhhJSo+GPaenz61bjIp9BQJAP0L4WT3qK09bZD+XW5FrIw+rHV3esfuwk9hGkWA8nnwVZlqDufxeU+8+lo1FnMcUXMyt6QA6UBIdqxrvz/m2MmKE39FSjFdxKJwxAtNb53Pct1aSPzHEmBuVhka3yZkE5m5K/lyDVNdxUKNMpBcqThFBgoJhg6CsvAgMBAAECggEBAIwEKGHjLRaHCaxdPJpqScIodVWEnHsrHPRd14kaQ/1/D19p91CoZOvKUKuWzVjZd50JxgHitOafkzAQjKezwxAYCIQndGDy4OYWy84je071FC2PBaa2OEP/XoOXaqLE76jZn2rH/Bb7Nz8as17flCyA88LeTdRQGh7GY2X4t9IpMcbmghPWNugTdIvfePYWSgIUf5r6ENrpDYjHi58rauucyt1skFT8+UmngLke8d6J3bIIm+22cYB15ecr0+45rc232yrjTiSCrNPiv1N7AuhWY2VI5dakS8SROWVGeiC1OAUktkVohlf3/MKwqPGJc4rAPNaPF29JpBm2rzbcURkCgYEA6Rg+RwTylUUarrtLhtrrJvY1PuGB5JGe+ypXG+JvVXfmtNCkWcdIyDAkoa8nA4sNXSuCdvVMb4MV0vmmOhvEoWjJiJkwGnHk3V4O2q8fTXcwdOXQRrje3Ubhi+tK4db3SgheEwnkf4db2sNwRdq1R4IdLPL7wLKULYmVSjNsvpUCgYEAyeLe15R2vvK4anKutxPzX7vi+h8yiJHasPI7xJfFwtCxZjiNl05kL742pSz/JfmikUnYADFWuvc45fNzYzyFrzByugPfozws9JplDV1yD5q25iXmiDmtzh8yGQJgEzPs4RthlqlP0DT1H6u2TRkGII+K8OvbzUKXRAISX2AOBbMCgYEAwkJcFKAA83oGBL0+8oKcG3pxYZhawnzB/ByLQEfz9UzZzrNbZR76fyvwO3dXklJertlF/5HrQ7wBgjRg3mip9ML5woe4WTG2RO7QflwYQF0m2yVz8Jy9z7f03MEZRSH8MYzLqh5Cei361VSvyue80H2VhxJx0WSCrXjOHGrDJAkCgYAvqU/StUoTaln/R3PX5O3f/Atp4VOcylJG0+koUGxvwbUf3NoQjoE4hD+CX00dOgIXKsfDw+Il4ZedMgxbsT4eTeHH6IIzl1FFre2NajIzXOMxEmGKZ5OQxeyd2uGzpt6VhlFTsEUXcmksQO2Y5f98UGcM2aHao43ykEqmGZc14QKBgBReOYfmJyl461+/8xdckzGCSlIeHv3cuVyfGHQH2grL2/WIPmgBj8KjvqtWK4EAhOB25TP8MzdrXbfgTl04U8MxGDF99DXQKcV6OZm7DeLja3DoDSdAk2nor2xWpBIAjD1wGdKgHjD1bHTXR1t5D65J5WwM4ANeyjSikGi6gs7Z");
        privateKeyArr.add("MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCaCyxrdXA5IL7o3m1UHmPleAgS5FY8YA/zqNelX4A/rpUOfdtA3pdzRkrDEGDlZ3AOANe0Td1ms5I7kIjh48PRo7SyX++0dzZLx0XsSsUc47RNzVJbB1bHFOyVEEzyZwXiA3RRTV6D13pQ1osANhCTrMAnbq//0jOVUeSe4Rx39wVZ3IJZuywfIBvJ5rH6/P1/qNiLB3PZfhQlOLgSfQypqBc80gOryfBNSCxfcF+97ukT4UJ4dnuDhyqPk4PWDo1TrUVY+D3wg4vZfnmhBxCRCfGnRI4RHjZgkmixNOfhlbrhn1VAnEHNDYyiwZg1sInY1rpDC07uycBJEfd9aj8tAgMBAAECggEAKuE/XS5UreJaojIAVvEat66g+LlM9AN9jUMLvEIITjHH1j/cf4M2v2TqvL/baSBRBeTgJpWiMst7wk7qe47OXJXoX9rqu96PY6q14R+zHOaZsyqbaTFyy3ocnSXrdXKOJar2fwc9bw/VQZlnGgjytljZKGDcZybZKxCfxkY9iXrwBxndPVRFdZCg7jxGL8UYfmo60bNPXOv4VauCWkplrnsZ1R+AjS6x8RrGrZ6kyUWPqqTjXxH3R4/nq2yhbH9BOIDUbaiYEG4IGXOK00cknqfauVSQvVXGgrbD+U6zAWRY0oTO+9FVnXRqQieGZMnJHd9gQ2MjHMlljOdnO558QQKBgQDNtBe5S8ucdKOJIe8qobwu1Qujk5tzFZ4U6SPzMF3ZLBxoqcVasAx7aQThxFb8GBf3sTrWsRUKseCph+NFwklIYNSkq+KOzOpU/hVjOPiXI3b/UoeV/PIAd5SGeq8AOAXj/9SovfwNb9RFd9a3z1zlbhZMEbb3VIzy+ilqlgag0QKBgQC/tXV3oi9X2Ip8h0DtogmHSeBAkpSc6y0W6b0tF/Dr4gJlFOPbekxZxOO3m2AUqJI2Eqtjbg6oC2ggBE1l0PcMLOYrlGot7MVlZaNuk7LtCGtI3lqDm64WDIE8HrbKbkhPsSxc74QFSYHcDCWKOFMjbrdOpnvIBSj/O47PEW9vnQKBgF/usXG1K4wXyXzW2pdjPkQJD5iF6mVNm5/c6usrj1kM/WLCakvU9r1HSQORcY+4HNVjTjF5/Ho0YrYtrYyHA25B2mnBz7MRVee1Z3wSwbyayZBhiOImSSZ2nknpRVwwxG6EjUT09Wu+z5xmOzkV+Bj3smZfjJjkUaevi0kuFoFBAoGAKxIVph8mC9J2qquohrsU8PREEb3c7bRYmQFCo1Lxqc1JRHSBDNpZNQHrN2ENIRcOYl+nadtcJ50Ic8kDqpBcMLwVqkzZ3h+H6dP/9+PvGxn9II30QAVGA2Yj0uIDp09Hp7/ie67ENnvhVRLVjExDQX6qaF03CiU+pLk4yITeSHECgYEAnWbmbRfi7Thr0FVPo40cAUlkq+Cy5pH0pPCoZD00KzLHCQ5ekORaOQK8IKp7qNoY2ObyIgaMEAh9JBfq7qxjzKes2kvmyZbyMJiEafUfoZi1bCqQPIFuDsMRRxCZTehk04s05r+0kcLCpMRr53fjHR4dZpOSoFbJfoUaVsJ/K5c=");
        privateKeyArr.add("MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCZ8yNiJsSafeMZ0q99MsTpOx7r8d0Xg94/TdW8ZQmGvi0y1pLe7u8JUj31z1FEOJwmkgUwC/JfBcqDMauxyV7EkMaz6uVhwAOu05/1gEjyU4sE5BDpjamvt8INDX8ObK2LKKNwAGTLFtMQfEM+rs8IQcUTUQUtMSu/YjGAKDZFChq+FHAmxCgLHOJnXuC9PqZ7cCvQLepSiMECLHuJ/mQGCqLnm3w2MW+fJpAmoSpa36rASv8IpJ/zVSbKUiVvhMGvuN1OVSIKwn5oeoHdciwbtuhW89JeHlzKOMpUFq2hDnLAgdmsI84XsTf64INrolbwTCCNpf/xxF24/B8TFoFXAgMBAAECggEACvcigg842bg1wNUc4tIG7IXlgfDMSqx93AxzOOQJdat+FKzr8S0boZJWD3gg1bciiCzGadGwBcynzAhxrkwlj+KwBIiqpffDS2SPdDEbAQeqU0LbYYdRms5/5+YaMrDS+6J9YbDlfQG3Lulq8MAKxw/INcQDlmB2OT+JPxOeKfSdVX2K3fIQd6DYlw0kSThOpQuEqaAP+McwRuPyCTCDlmNIRxDEf2E0eAWuFhECCWUXnIbQN6RDFs0quRmToCxPjYgtW6EHRyxEUizr3leRzowPXBaUXlEaEEcFJ7fpI8dyX1fZGkyMWnuZ2h9rn7fuLb3jRdD8W9ABTry+VElFgQKBgQD3BuMXoXljKzpakxWjGqLplZqyvIJgOTXlSmySHXNcrUBrKUbG1CbLzoVQErgjlwTEXjTOKX3XFEzjAXO6UqX0x7XFwsW407JS8F4aDz0qK3PeDjCq1NZzFrIMe7j1XOo+Hc3i5I6/1NQIfKl5maVp+G7A+cPSsbPOJK3OQOV/cQKBgQCfirkdGcBvqvIX9VC8TJWaYhiBWZuoU0hFVo7xQkj0+vaaVFHhd6pYuXqGuj1B3LDyI9+HKs5zJogSTZGZveNsEJwNBraEn/Hs0OLRzLPK+yC26sRyEk3QnjA7nGu2TxPawwwf5xSUyR5RnpyCTKNSARMP9s2oDSbf76tEsxA5RwKBgQDr1f9oyBiDvPlxD4tQtFVkfBe9HIu8IeJ6jZspxEQm7qDZrgaMPG7tlLVhxP1XvQ4oC2iOir5BYHgnIXPDJrSaBTBdJZ5u3m0ZEbJFXtceM23jSdjcv2YdakWB9XyXg6V+uCWfwGUob6AemiWSmkV57lyOj+WMeWsYG5xzlTGFgQKBgQCVqIbvgmmfFseUq915VYn80UpVhF5c7wrbaFAchuZzUDwmFzTcAOn94rfKTEgMUV53NimH3SLep+V67eLISnVcuNP58DMkg/loAabT0WdS4HIWxHFU5FC0gr+SG7B6ywE/9Dmab6VB0MutGtGL9SI7WaCtGAJhQz0VUfjiL+rnHwKBgBk/qyU0rXtQGkwWa4vNyLoBP9trDzLqiXSN6JzX14KpGEFRKsuLOym+UVCafiE++QtYF89aJHVn666YrKRPHBEykHuum+3rOmvHBSkPStdS173Xj70KYZ09gkYcOP4TngR0/bC52/AhnLA4XE6rbLu4YSumm64r5KAiWnZim4kG");
        privateKeyArr.add("MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCOWpqdaGR71M4pqgdE2Qu8MYwDXz15fTeGnf1MGQjYrcLBrae4X0AMSM5da74P88utkvIxJTIUIQdi4s4t4aWc3VIiE9nYoH/ZyC7x9UELBdFF4etkhEHNvH6nO45cjao2ML8V52pSSbjyep+xqalS6HiIejlFNBuJsg4r4Bf7D81IHEqokGRPHpaHolRPVSFMhWAXQeanvSzIg3e8Ja1z0wF7OjIA9NXQxTezk4yfgQcyc07kL9PiAVHCxCEZhJYEYzhafhLrsuFbTqhoP/UvJhVZZ081rDzLun9vk0gxe8dkPfwP6Fl7VRRS7m9PPV5X7NR2OO8GLLGbMZWhL2QXAgMBAAECggEAPmRPp/X9NJkM0w4GqZJHpnBA4al4lCrhj0rnndbLHczqs2CdRh3ZQIkYibGTWAKOnsDtDcUzscbYKesmWs2vfJU0TmNM87lEz/sBOGM54s7l7i8asK+W98lJ6Zocx0v/8khjOAJ5gx90xDIilAe8gu4JBigrub0g5LT5qRlK6WpXjX9U6CzPVtwaYYzdXxpUtbt8Ck4yaKkt5K86wfUJ9Kz0RkwuutcKAkxyRdLQuA5OzZcQDctZRlHRFgL1wUn0iQ1goqjYZnoPOBuYL1YJI+8kqn3M3/mvudq1Ma1ga/tekI93/LeLZpPp/hNGs87IStj/Dd4cjZb9mm3Lxn0poQKBgQDRWIuu/mz6DOXcEHgJBUSVtpgv5aMXJuy7wEA7cUpALcL81j8GVxbu4PFI0g24bFZ7xR2KWtn4w+1PXMsjM0NxFBRxZmxGk7tFrCNozqdxeSHaXWHkFZ16hEZ5qAiQwDIHXNeCmMOJnP4UOEHvCncsxptOxFtA8AfWhAsDHHsd1QKBgQCuFBR9gmjLKEYM32lVDr8NR0gdWtjXf7Z3QR0hi2uhYM87+rbkcb0PrCSaaCBGrk8GPbDEPl6ZL7uahE9feGKIH/RIihsKM6dqwO7a+HmsXqMCLhZAL+8/TnRaFmA9OTaMRCovoiQ0c+6KulZUNsAq/lvzXPlJc0POkJQjwJ90OwKBgD+SwiiMPw/YZt1javBiVyeX4bN56wMW4QFLKrZiewfuXa5maZFFVUOJr/xLPbtpuwGvJH9lg5gV97UIGvA/mxV14ZdmYS81ocNQuRgU2aiN/ofPn/Ch18bi8Hv1WVSL6SVvPkr8lTTvJgGB7BPpe7NvRK6w1n1r5xVv1+BD/+dZAoGAM5EzOLLnBDeb+Lg95bqGkhJppHiC/+OPU+hwDr3UVmvtN+FfSHEBBqGB/lOWLBn6wuiHcrrfHxXqxy0mritlVNnSbaKru+vtTkx09Vzh/lPSihTI9p68is5c3Ur/m2NVa1vN+2pWu0sUgPgOFshZSOMsrfz+w+lnTsu5dpXbJn0CgYEAxorAbiRPHxSfsixcAFtog2cJlaPqyzcRqJQZqQj6uAJLaxEOfSCMPld7pVfwG+Q1chQLGhAmTPvHqeXVAhisp/lu7LtlPuN384ug3fTzc34q5k8JAFQbWvfp/FpxZBHZTqe4yYBm08eCuMYAzyADl62r6blE0OhVWFaNUnQdqKw=");
        privateKeyArr.add("MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCmS0Ao6a6vHKhTYrmYEdWLIGnrY16qPK5LaiE2YB3gs/fqgKyQYxt+YI7v3f6WvBHOFpVVIpOrNOKT1XRqSfc8nIV556AC81Z0EImZb+6P9UTUbMNjvc1BlGFjH24wGkhZ6PZ2Fe04Smlmx8NKCyjjslcJjb3EH5SJHNtO0tx9/rcibbWK1oYc1VP5mb+Wl1dqGc59G9GEWO645FJqFuGjRsF6AAcXmexrswYVtY4Q8rK2e3sgIJnxElyeO4OTdWtzJqpC6/oiKbgElKejb7pNhlaMG55sdIbwblE9cB9j93yy/ame3yBJE+1cSQttRTYoAt0hKe6s99sVKUf6zHMdAgMBAAECggEAD0uknx6/XoP4R5MxFves+JsGowwEzQu/zFf6rhGxLdXf28XyGWXERZ+EBjQZEqxBxv70xVvk0T6QCKD9kDk1cHHFJS1U3nCbZxmOTnqpKryYlCFc53OxyXJocsGVVP9V4E85PCtQInlVsIp3P/w+ypLAxrQu3Dc7ZlEtKtbiSQRamIJ0qsqnxG3zO31VUcDCUuk8ILa8SGgt5Prqw9/F/Iw38c/m6WEdedVBsnAVek1TwtQK4bnCxuuSSS0gmORm82GcXHjD3/MmYKc29cswi81+QQR5bv8TYtV9CwRa9nE38AB0NEWvrhqhKUl0QghoN5hLFzTan/C92DDYPK2w0QKBgQDjjdNIoC4dWzUkiWd54LdMdHtiF8edkBoJtuy0/XeWYa4cV1aFnSN2wCRshlKWQGRNVuM73AucRAjAljsqHJQBHOOXeOA8kidOhpYi6Goi9FD00cfqqrBH7VMO7PAWRhdz6WlqzJ8CkoCm1PDnh3OclGXqnx9N6wBlefFM90IpPwKBgQC7FPu2lsTW357XNmpL3V4WA+gwhHbQnUAn44Z9XpWztw4tSb1ZrGePMiaoLqcXT1U7EXYHpF+LUmUezWt278nPQFMNb0kM3QD0SZr9INrafdCPJb3E78fh1xJuSlNGUodCUqaVQZuCoJA/vL5WtjnOk8Lij6I/Yt05F3PCCpfQowKBgBZuGHGEOId0QhzD3otI90h2AuN8bJS/a5GhkluU0IDmR/9LLKAnCSPfdLet1d4xorFs6yEvY4WXvzUcmeBgyMYDTvvTUmcmEPHQmmP+fNfNNV2sgARFpvKwFgvWlyPa7NzkGRwJ53Kddkj7nHN2CpNYnWMvJCrOC0/1YS+w/7iJAoGAISCtFf8KqhX9FZTwK7DuWS2l7vl15KkD1Exo40hdb+5pV0GogvmRePzjdYKVWf5VVFlaMi48MPqNJ3AuqGf7r3RvgICFSf7UjW1/QXWQ64G97as8OGRRW79u5xLIPjqc8vSZxPJSLEZsZKzyc35fLCJkLyRKEbla/SIXAHRJv8sCgYADZPNQJwbgw5WxqZW6C4SC5bm9jbLkDaufqBzQLjwVeyfIp78pYlimXM/CLRL3MA1/GyM/+jnUSapAdWDPWpazI4nOxrS5lOdztjMsQbw5nmRzRpoViIL3xClSNo2JenS7TzAEgoM2bHt0Hg2iYK1aRp792s9mtoFBR4S+M0/OhQ==");
        //공개키 모듈러스(16진수)
        publicKeyArr.add("b7d29b340e20dc5550c87da0c3fa4c579f95d029b17185f508734deb525730b57c29f4d833d09f5e450f665a6ab7e2811ce5163d5e765b9ff22196cd34952a777ec50fb295f6cbc714abaf58c5c145d58b1e6eb212f17c9d2665f4a7e446fe7d45f0f9b5aad021d7e095ebb1c0062b6aab6110041b31861252a3e18f69e9f3eb56e3229f4140900fd0be164f7a8ad3d6d90fe5d6e45ac8c3eac75777ac7eec24f611a4580f279f055996a0ee7f1794fbcfa5a3516731c517332b7a400e9404876ac6bbf3fe6d8c98a137f454a315dc4a270c40b4d6f9dcf72dd5a48fcc712606e56191adf26641399b92bf9720d535dc5428d32905ca93845060a09860e82b2f");
        publicKeyArr.add("9a0b2c6b75703920bee8de6d541e63e5780812e4563c600ff3a8d7a55f803fae950e7ddb40de9773464ac31060e567700e00d7b44ddd66b3923b9088e1e3c3d1a3b4b25fefb477364bc745ec4ac51ce3b44dcd525b0756c714ec95104cf26705e20374514d5e83d77a50d68b00361093acc0276eafffd2339551e49ee11c77f70559dc8259bb2c1f201bc9e6b1fafcfd7fa8d88b0773d97e142538b8127d0ca9a8173cd203abc9f04d482c5f705fbdeee913e14278767b83872a8f9383d60e8d53ad4558f83df0838bd97e79a107109109f1a7448e111e36609268b134e7e195bae19f55409c41cd0d8ca2c19835b089d8d6ba430b4eeec9c04911f77d6a3f2d");
        publicKeyArr.add("99f3236226c49a7de319d2af7d32c4e93b1eebf1dd1783de3f4dd5bc650986be2d32d692deeeef09523df5cf5144389c269205300bf25f05ca8331abb1c95ec490c6b3eae561c003aed39ff58048f2538b04e410e98da9afb7c20d0d7f0e6cad8b28a3700064cb16d3107c433eaecf0841c51351052d312bbf6231802836450a1abe147026c4280b1ce2675ee0bd3ea67b702bd02dea5288c1022c7b89fe64060aa2e79b7c36316f9f269026a12a5adfaac04aff08a49ff35526ca52256f84c1afb8dd4e55220ac27e687a81dd722c1bb6e856f3d25e1e5cca38ca5416ada10e72c081d9ac23ce17b137fae0836ba256f04c208da5fff1c45db8fc1f13168157");
        publicKeyArr.add("8e5a9a9d68647bd4ce29aa0744d90bbc318c035f3d797d37869dfd4c1908d8adc2c1ada7b85f400c48ce5d6bbe0ff3cbad92f231253214210762e2ce2de1a59cdd522213d9d8a07fd9c82ef1f5410b05d145e1eb648441cdbc7ea73b8e5c8daa3630bf15e76a5249b8f27a9fb1a9a952e878887a3945341b89b20e2be017fb0fcd481c4aa890644f1e9687a2544f55214c85601741e6a7bd2cc88377bc25ad73d3017b3a3200f4d5d0c537b3938c9f810732734ee42fd3e20151c2c4211984960463385a7e12ebb2e15b4ea8683ff52f261559674f35ac3ccbba7f6f9348317bc7643dfc0fe8597b551452ee6f4f3d5e57ecd47638ef062cb19b3195a12f6417");
        publicKeyArr.add("a64b4028e9aeaf1ca85362b99811d58b2069eb635eaa3cae4b6a2136601de0b3f7ea80ac90631b7e608eefddfe96bc11ce1695552293ab34e293d5746a49f73c9c8579e7a002f356741089996fee8ff544d46cc363bdcd419461631f6e301a4859e8f67615ed384a6966c7c34a0b28e3b257098dbdc41f94891cdb4ed2dc7dfeb7226db58ad6861cd553f999bf9697576a19ce7d1bd18458eeb8e4526a16e1a346c17a00071799ec6bb30615b58e10f2b2b67b7b202099f1125c9e3b8393756b7326aa42ebfa2229b80494a7a36fba4d86568c1b9e6c7486f06e513d701f63f77cb2fda99edf204913ed5c490b6d45362802dd2129eeacf7db152947facc731d");
    }


    @Override
    public String getPublicKeyMoudules() {
        return publicKeyArr.get(rnum);
    }

    @Override
    public String getPublicKeyExponent() throws Exception {
        return "10001";  // RSA 공개지수는 65537(16진수로 10001)로 사용된다.
    }

    //인코딩된 개인키를 디코딩
    @Override
    public PrivateKey getPrivateKey() throws Exception {
        try{
            String privateStr = privateKeyArr.get(rnum); // 암호화할 개인키를 가져온다.
            byte[]bPrivateKey = Base64.decodeBase64(privateStr.getBytes()); //privateStr을 바이트 배열로 변환 후 Base64로 디코딩한다.(bPrivateKey은 암호화된 개인키의 바이트 표현)

            KeyFactory keyFactory = KeyFactory.getInstance("RSA");
            PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(bPrivateKey); // PKCS8EncodedKeySpec 객체를 생성하고 바이트 배열을 기준으로 개인키의 스펙 정의 (PKCS#8은 개인키를 저장하기 위한 표준 포맷입니다.)
            privateKey = keyFactory.generatePrivate(keySpec); //KeyFactory를 사용하여 PKCS8EncodedKeySpec에서 PrivateKey 객체를 생성합니다. 생성된 PrivateKey 객체는 privateKey 변수에 저장됩니다.
        }catch (Exception e){

        }
        return privateKey;
    }
}
